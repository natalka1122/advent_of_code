# 639
# too high
from __future__ import annotations
from typing import Optional

# FILENAME = "demo1.txt"  # expected 45
FILENAME = "demo2.txt"  # expected 64
FILENAME = "input.txt"
START = "S"
END = "E"
EMPTY = "."
WALL = "#"
INFINITY = 100500
FORWARD = 1
ROTATE = 1000 + 1
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]


class Distance:
    def __init__(self, value: str) -> None:
        self._data: dict[tuple[int, int], int] = {
            (0, 1): INFINITY,
            (0, -1): INFINITY,
            (1, 0): INFINITY,
            (-1, 0): INFINITY,
        }
        self._min = INFINITY
        self._value = value

    def __repr__(self) -> str:
        result: dict[tuple[int, int], int] = dict()
        for key in self._data:
            if self._data[key] < INFINITY:
                result[key] = self._data[key]
        return f"{self._value} {result}"

    def set(
        self,
        key: tuple[int, int],
        newvalue: int,
    ) -> bool:
        if (key[0], key[1]) not in self._data:
            print(f"key = {key}")
            raise NotImplementedError
        if INFINITY <= newvalue:
            return False
        if self._data[key] <= newvalue:
            return False
        self._data[(key[0], key[1])] = newvalue
        if newvalue < self._min:
            self._min = newvalue
        return True

    @property
    def min(self) -> int:
        return self._min

    @property
    # def best_directions(self) -> set[tuple[int, int]]:
    def best_directions(self) -> list[tuple[int, int]]:
        if self.min >= INFINITY:
            return []
        result = []
        for key, value in self._data.items():
            if value == self.min:
                result.append(key)
        return result

    def set_zero(self) -> None:
        if not self.set((0, 1), 0):
            raise NotImplementedError

    def go_here(self, dy0: int, dx0: int, source: Distance) -> bool:
        result = False
        for dy, dx in source._data:
            if (dy, dx) == (dy0, dx0):
                if self.set(
                    (dy0, dx0),
                    source._data[(dy, dx)] + FORWARD,
                ):
                    result = True
            elif (dy, dx) == (-dy0, -dx0):  # Cannot go back
                continue
            elif self.set(
                (dy0, dx0),
                source._data[(dy, dx)] + ROTATE,
            ):
                result = True
        return result


def main() -> None:
    the_map = []
    start = None
    end = None
    with open(FILENAME, "r") as file:
        y = 0
        for line_ in file:
            line = line_.strip()
            if START in line:
                if start is not None:
                    raise NotImplementedError
                start = y, line.index(START)
            if END in line:
                if end is not None:
                    raise NotImplementedError
                end = y, line.index(END)
            y += 1
            the_map.append(line)
    if start is None or end is None:
        print(f"start = {start} end = {end}")
        raise NotImplementedError
    print(f"start = {start} end = {end}")
    print("\n".join(the_map))
    dist: list[list[Distance]] = []
    for y in range(len(the_map)):
        dist.append([])
        for x in range(len(the_map[0])):
            dist[-1].append(Distance(the_map[y][x]))
    dist[start[0]][start[1]].set_zero()
    print(f"dist = {dist}")
    Q = [start]
    while len(Q) > 0:
        closest_index: Optional[int] = None
        closest_dist: int = INFINITY
        for key, value in enumerate(Q):
            if closest_index:
                current_dist = dist[value[0]][value[1]].min
                if current_dist < closest_dist:
                    closest_index = key
                    closest_dist = current_dist
            else:
                closest_index = key
                closest_dist = dist[value[0]][value[1]].min
        if closest_index is None:
            raise NotImplementedError
        if INFINITY <= closest_dist:
            raise NotImplementedError
        y0, x0 = Q.pop(closest_index)
        for dy0, dx0 in DIRECTIONS:
            y = y0 + dy0
            x = x0 + dx0
            if (
                0 <= y < len(the_map)
                and 0 <= x < len(the_map[0])
                and the_map[y][x] in [EMPTY, END]
            ):
                if dist[y][x].go_here(dy0, dx0, dist[y0][x0]):
                    if (y, x) not in Q:
                        Q.append((y, x))
    for y in range(len(dist)):
        print(f"{y}: {dist[y]}")
    print(dist[end[0]][end[1]])
    print(dist[end[0]][end[1]].best_directions)
    # Let's find a way back
    Q = [end]
    visited: set[tuple[int, int]] = {end}
    while len(Q) > 0:
        y0, x0 = Q.pop()
        # print(f"y0 = {y0} x0 = {x0} dist[y0][x0] = {dist[y0][x0]}")
        # if dist[y0][x0].min == 0:
        #     break
        best_directions = dist[y0][x0].best_directions
        # print(
        #     f"y0 = {y0} x0 = {x0} dist[y0][x0] = {dist[y0][x0]} best_directions = {best_directions}"
        # )
        # if len(best_directions) == 1:
        #     visited.add((y0, x0))
        #     Q.append((y0 + best_directions[0][0], x0 + best_directions[0][1]))
        if dist[y0][x0]._value == START:
            pass
        elif len(best_directions) >= 1:
            for dy, dx in DIRECTIONS:
                if (dist[y0][x0]._data[(dy,dx)] - dist[y0][x0].min) in [0,1000]:
                    visited.add((y0 - dy, x0 - dx))
                    Q.append((y0 - dy, x0 - dx))
            # if dist[y0][x0].min - dist[y0 - dy][x0 - dx].min != FORWARD:
            #     raise NotImplementedError

            # raise NotImplementedError
        # elif dist[y0][x0]._value == START:
        #     pass
        else:
            raise NotImplementedError
    for y in range(len(the_map)):
        for x in range(len(the_map[y])):
            if (y,x) in visited:
                print("O",end="")
            else:
                print(the_map[y][x],end="")
        print()
    print(len(visited))


if __name__ == "__main__":
    main()
