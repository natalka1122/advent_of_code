# 4294967296
# too high
def read_expected_line(file, expected):
    line = file.readline().strip()
    if line != expected:
        print(f"line = {line} expected = {expected}")
        raise NotImplementedError

def from_source_to_destination(source_pairs, the_map):
    print(f"source_pairs = {source_pairs} the_map = {the_map}")
    new_pairs = set()
    for start, range in source_pairs:
        end = start+range
        for _,map_start,map_range in the_map:
            map_end = map_start+map_range
            print(f"start = {start} end = {end} map_start = {map_start} map_end = {map_end}")
            if start <= map_start:
                if end <= map_start:
                    new_pairs.add((start,range))
                    continue
                elif end <= map_end:
                    new_pairs.add((start, map_start-start))
                    new_pairs.add((map_start,end-map_start))
                    continue
                elif end > map_end:
                    new_pairs.add((start,range))
                    continue
                else:
                    print("HI10")
                    raise NotImplementedError
            elif start <= map_end:
                if end <= map_end:
                    new_pairs.add((start,range))
                    continue
                elif end > map_end:
                    new_pairs.add((start, map_end-start))
                    new_pairs.add((map_end,end-map_end))
                else:
                    raise NotImplementedError
            elif start > map_end:
                if end > map_end:
                    new_pairs.add((start,range))
                    continue
                else:
                    raise NotImplementedError
            else:
                raise NotImplementedError

            # if map_end <= start or end <=map_end:
            #     new_pairs.add((start,range))
            #     continue
            # if map_start<=start and end <= map_end:
            #     new_pairs.add((start,range))
            #     continue
            # if map_start <= start:

            # print(f"start = {start} end = {end} map_start = {map_start} map_end = {map_end}")
            # raise NotImplementedError
    new_pairs = set(filter(lambda x: x[1]>0, new_pairs))
    print(f"new_pairs = {new_pairs}")
    processed_set = set()
    result = set()
    for item in new_pairs:
        print(f"item = {item}")
        flag = False
        for dst,src,rng in the_map:
            if src<=item[0]<src+rng:
                print(f"Found {dst,src,rng} => {dst-src+item[0]}")
                result.add((dst-src+item[0],item[1]))
                processed_set.add(item)
                if flag:
                    raise NotImplementedError
                flag = True
    for item in new_pairs:
        if item not in processed_set:
            result.add(item)
    return result

def main():
    with open('input.txt', 'r') as file:
    #with open('demo.txt', 'r') as file:
        seed_list = list(map(int,file.readline().split(":")[1].strip().split(" ")))
        seed_pairs = set((seed_list[i], seed_list[i + 1]) for i in range(0, len(seed_list), 2))
        print(f"seed_pairs = {seed_pairs}")
        read_expected_line(file,"")
        read_expected_line(file,"seed-to-soil map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        soils = from_source_to_destination(seed_pairs, the_map)
        print(f"soils = {soils}")
        print("="*20)
        read_expected_line(file,"soil-to-fertilizer map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        fertilizers = from_source_to_destination(soils, the_map)
        print(f"fertilizers = {fertilizers}")        
        print("="*20)
        read_expected_line(file,"fertilizer-to-water map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        waters = from_source_to_destination(fertilizers, the_map)
        print(f"waters = {waters}")        
        print("="*20)
        read_expected_line(file,"water-to-light map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        lights = from_source_to_destination(waters, the_map)
        print(f"lights = {lights}")
        print("="*20)
        read_expected_line(file,"light-to-temperature map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        temperatures = from_source_to_destination(lights, the_map)
        print(f"temperatures = {temperatures}")           
        print("="*20)
        read_expected_line(file,"temperature-to-humidity map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        humidities = from_source_to_destination(temperatures, the_map)
        print(f"humidities = {humidities}")
        print("="*20)
        read_expected_line(file,"humidity-to-location map:")
        the_map = set()
        while True:
            line = file.readline().strip()
            if len(line) == 0:
                break
            the_map.add(tuple(map(int,line.split(" "))))
        locations = from_source_to_destination(humidities, the_map)
        print(f"locations = {locations}")  
        result = None
        for location in locations:
            if result is None:
                result = location
            elif result[0] < location[0]:
                result = location
        print(f"result = {result}")

if __name__ == "__main__":
    main()
