# 2135
# too high
from __future__ import annotations

# FILENAME = "demo.txt"
FILENAME = "input.txt"
PATH = "."
FOREST = "#"
UP = "^"
DOWN = "v"
LEFT = "<"
RIGHT = ">"


def main() -> None:
    start = None
    the_map = []
    with open(FILENAME, "r") as file:
        for line in file:
            the_map.append(line.strip())
            if len(the_map) == 1:
                start = (0, the_map[0].index(PATH))
    if start is None:
        raise NotImplementedError
    end = (len(the_map) - 1, the_map[-1].index(PATH))
    print(f"start = {start} end = {end}")
    paths: list[list[set[tuple[tuple[int, int], ...]]]] = list()
    for _ in range(len(the_map)):
        paths.append([])
        for _ in range(len(the_map[0])):
            paths[-1].append(set([]))
    paths[start[0]][start[1]] = {((start[0], start[1]),)}
    print(paths[:2])
    Q = {start}
    while len(Q) > 0:
        y0, x0 = Q.pop()
        if the_map[y0][x0] != PATH:
            raise NotImplementedError
        path0 = paths[y0][x0]
        # print(f"y0 = {y0} x = {x0} path0 = {path0}")
        print(f"y0 = {y0} x = {x0} len(Q) = {len(Q)}")
        for dy, dx in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            y = y0 + dy
            x = x0 + dx
            if 0 <= y < len(the_map) and 0 <= x < len(the_map[0]):
                if the_map[y][x] == FOREST:
                    continue
                if the_map[y][x] == PATH:
                    len_path = len(paths[y][x])
                    for path in paths[y0][x0]:
                        if (y, x) not in path:
                            paths[y][x].add(path + ((y, x),))
                    if len(paths[y][x]) != len_path:
                        Q.add((y, x))
                elif the_map[y][x] == UP:
                    raise NotImplementedError
                elif the_map[y][x] == DOWN:
                    len_path = len(paths[y + 1][x])
                    for path in paths[y0][x0]:
                        if (y + 1, x) not in path:
                            paths[y + 1][x].add(path + ((y, x), (y + 1, x)))
                    if len(paths[y + 1][x]) != len_path:
                        Q.add((y + 1, x))
                elif the_map[y][x] == LEFT:
                    raise NotImplementedError
                elif the_map[y][x] == RIGHT:
                    len_path = len(paths[y][x + 1])
                    for path in paths[y0][x0]:
                        if (y, x + 1) not in path:
                            paths[y][x + 1].add(path + ((y, x), (y, x + 1)))
                    if len(paths[y][x + 1]) != len_path:
                        Q.add((y, x + 1))
                else:
                    raise NotImplementedError
    print(len(max(paths[end[0]][end[1]],key=lambda x:len(x))))-1


if __name__ == "__main__":
    main()
